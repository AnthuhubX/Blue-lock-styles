-- Shadow Football Abilities Script
local player = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local Debris = game:GetService("Debris")

-- Load Knit and StatesController for speed boost
local Knit = require(game:GetService("ReplicatedStorage").Packages.Knit)
local StatesController = Knit.GetController("StatesController")

-- Load VFX assets
local shadowVFX = ReplicatedStorage.Effects.PowerShot.Dragon.Attachment

-- Shadow Kick Ability (170 power)
local function performShadowKick()
    local character = player.Character
    if not character then return end
    local humanoid = character:FindFirstChild("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not rootPart then return end

    -- Animation
    local anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://18723315763"
    humanoid:LoadAnimation(anim):Play()

    -- VFX
    local vfx = shadowVFX:Clone()
    vfx.Parent = rootPart
    for _, emitter in ipairs(vfx:GetDescendants()) do
        if emitter:IsA("ParticleEmitter") then
            emitter.Enabled = true
        end
    end
    Debris:AddItem(vfx, 1.5)

    task.delay(0.5, function()
        -- Shoot with 170 power
        ReplicatedStorage.Packages.Knit.Services.BallService.RE.Shoot:FireServer(170)
    end)
end

-- Flashing Step Ability (Precise dribble with Inferno Glide animation)
local function performFlashingStep()
    local character = player.Character
    if not character then return end
    local humanoid = character:FindFirstChild("Humanoid")
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoid or not rootPart then return end

    -- Animation (same as Inferno Glide)
    local anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://99916870664377"
    local animTrack = humanoid:LoadAnimation(anim)
    animTrack:Play()
    animTrack:AdjustSpeed(1.5)

    -- Precise dribble movement
    local segments = 10
    local duration = 0.20
    local distance = 15

    local function step(count)
        if count > segments then 
            animTrack:Stop()
            return 
        end

        -- Movement calculation
        local dir = (count % 2 == 1) and 1 or -1
        local fwd = rootPart.CFrame.LookVector
        local right = rootPart.CFrame.RightVector
        local targetPos = rootPart.Position + (fwd * distance + dir * right * distance)

        -- Movement tween
        local tween = TweenService:Create(
            rootPart,
            TweenInfo.new(duration, Enum.EasingStyle.Linear),
            {CFrame = CFrame.new(targetPos, targetPos + fwd)}
        )
        tween:Play()

        -- Continue sequence
        tween.Completed:Connect(function()
            step(count + 1)
        end)
    end

    step(1) -- Start stepping
    
    wait(1)
    
    local anim = Instance.new("Animation")
    anim.AnimationId = "rbxassetid://99916870664377"
    local animTrack = humanoid:LoadAnimation(anim)
    animTrack:Play()
    animTrack:AdjustSpeed(1.5)
end

-- Shadow Dash Ability (Quick dash past players)
local function performShadowDash()
    local character = player.Character
    if not character then return end
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end

    -- Find nearest player in front
    local players = game.Players:GetPlayers()
    local closestPlayer = nil
    local closestDistance = math.huge
    local dashDirection = rootPart.CFrame.LookVector

    for _, otherPlayer in ipairs(players) do
        if otherPlayer ~= player and otherPlayer.Character then
            local otherRoot = otherPlayer.Character:FindFirstChild("HumanoidRootPart")
            if otherRoot then
                local toPlayer = (otherRoot.Position - rootPart.Position)
                local distance = toPlayer.Magnitude
                local dot = dashDirection:Dot(toPlayer.Unit)
                
                if dot > 0.7 and distance < 20 and distance < closestDistance then
                    closestPlayer = otherPlayer
                    closestDistance = distance
                end
            end
        end
    end

    -- Calculate dash target
    local dashTarget = rootPart.Position + dashDirection * 25
    if closestPlayer then
        dashTarget = closestPlayer.Character.HumanoidRootPart.Position + dashDirection * 5
    end

    -- Perform dash
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = (dashTarget - rootPart.Position).Unit * 100
    bodyVelocity.MaxForce = Vector3.new(1000000, 0, 1000000)
    bodyVelocity.Parent = rootPart
    Debris:AddItem(bodyVelocity, 0.5)
end

-- Shadow Speeder Ability (40 speed boost)
local function performShadowSpeeder()
    -- Activate speed boost
    StatesController.OwnWalkState = true
    StatesController.SpeedBoost = 40

    -- Reset after 10 seconds
    task.delay(10, function()
        StatesController.SpeedBoost = 0
    end)
end

-- Create ability buttons
local function createAbilityButton(buttonName, keybindText, displayText, abilityFunction)
    local bottomAbilities = player.PlayerGui.InGameUI.Bottom.Abilities
    local templateButton = bottomAbilities["1"]:Clone()
    templateButton.Name = buttonName
    templateButton.Parent = bottomAbilities
    templateButton.Keybind.Text = keybindText
    templateButton.Timer.Text = displayText
    templateButton.ActualTimer.Text = ""
    if templateButton:FindFirstChild("Cooldown") then
        templateButton.Cooldown:Destroy()
    end
    templateButton.Activated:Connect(abilityFunction)
    return templateButton
end

createAbilityButton("ShadowKickButton", "K", "Shadow Kick", performShadowKick)
createAbilityButton("FlashingStepButton", "V", "Flashing Step", performFlashingStep)
createAbilityButton("ShadowDashButton", "F", "Shadow Dash", performShadowDash)
createAbilityButton("ShadowSpeederButton", "G", "Shadow Speeder", performShadowSpeeder)

-- Keyboard controls
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode == Enum.KeyCode.K then
            performShadowKick()
        elseif input.KeyCode == Enum.KeyCode.V then
            performFlashingStep()
        elseif input.KeyCode == Enum.KeyCode.F then
            performShadowDash()
        elseif input.KeyCode == Enum.KeyCode.G then
            performShadowSpeeder()
        end
    end
end)
